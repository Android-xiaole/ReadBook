apply plugin: 'com.android.application'
// 依赖插件脚本
apply from: 'tinker-support.gradle'
apply plugin: 'com.jakewharton.butterknife'
android {
    compileSdkVersion Integer.parseInt(COMPILE_SDK_VERSION)
    buildToolsVersion BUILDTOOLS_VERSION
    defaultConfig {
        multiDexEnabled true
        applicationId "com.jj.novelpro"
        minSdkVersion Integer.parseInt(MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(TARGET_SDK_VERSION)
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME
        flavorDimensions "versionCode"
        multiDexKeepProguard file("tinker_multidexkeep.pro")
        //butter knife
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        //arouter
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [moduleName: project.getName()]
            }
        }

//        manifestPlaceholders = [value_isDebug: isDebug.toBoolean()]

        //JPush config
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        //JPush config
        manifestPlaceholders = [
                value_isDebug: isDebug.toBoolean(),//this is not JPush config
                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "cbe249f59dfa811d088cdab5", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
        ]
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    dexOptions {
        jumboMode = true
        preDexLibraries = false
        javaMaxHeapSize "4g"

    }

    signingConfigs {
        debug {
            keyAlias 'novelpro'
            keyPassword 'novelpro'
            storeFile file('../novelpro.jks')
            storePassword 'novelpro'
            v2SigningEnabled true
        }
        release {
            keyAlias 'novelpro'
            keyPassword 'novelpro'
            storeFile file('../novelpro.jks')
            storePassword 'novelpro'
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                def buildType = variant.buildType.name
                // 只有Release包可以变更路径（因为AS会自动安装Debug包，故Debug包路径不能改变）
                if (buildType == "release") {
                    variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk/${variant.productFlavors.get(0).getName()}")
                }
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    // 同理，只有Release包可以变更名称
                    if (outputFile != null && outputFile.name.endsWith(".apk") && buildType == "release") {
                        //App_release_chile
//                        def fileName = "App_${defaultConfig.versionName}_${releaseTime()} " +
//                                "_release_" + variant.productFlavors.get(0).getName() + ".apk"
                        def fileName = "App_" + buildType + "_" + variant.productFlavors.get(0).getName() + "_${releaseTime()}" + "_v${defaultConfig.versionName}" + ".apk"
                        // 将名字打印出来查看效果
                        output.outputFileName = fileName
                    }
                }
            }
        }
        debug {
            minifyEnabled false
            debuggable true
            manifestPlaceholders = [value_channel_id: "jjxs-default",
                                    value_openinstall: "uhm3lx",
                                    value_isDebug   : true]
            signingConfig signingConfigs.release
        }
    }
    productFlavors {

        "jjxs-default" {
            manifestPlaceholders = [value_channel_id: "jjxs-default",
                                    value_openinstall: "u5ymrc",
                                    value_isDebug   : false]
        }

        "jjxs-debug" {
            manifestPlaceholders = [value_channel_id: "jjxs-default",
                                    value_openinstall: "uhm3lx",
                                    value_isDebug   : true]
        }

    }


    repositories {
        flatDir {
            dirs 'libs','../sdk/libs'
        }
    }

}

def releaseTime() {
    return new Date().format("yyyy-MM-dd-HH.mm", TimeZone.getTimeZone("GMT+08:00"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    annotationProcessor "com.alibaba:arouter-compiler:${AROUTER_COMPLIER_VERSION}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${BUTTERKNIFE_VERSION}"
    compile 'com.baidu.mobstat:mtj-sdk:latest.integration'
    implementation project(':base')
    implementation project(':sdk')
    implementation project(':comic')
}
